import java.util.*;

class Source
{
	 public static void main(String[] args) { 
	 BST tree = new BST(); 
	 Scanner in = new Scanner(System.in);
     int counter = 0;
     int a =0;        
     // Output the variable to STDOUT
     int [] nodevalues = null;
     int totalnodes = 0;
     int emptofind = 0;
	 while (in.hasNextInt()) 
     {
     	// Read the variable from STDIN
     	a = in.nextInt();
     	if(counter==0)
     	{
     		if (a==0 || a > 99)
     		{
     			System.out.println("Enter tree size between 1 and 100");
     			return;
     		}
     		totalnodes = a;  
     		nodevalues = new int[totalnodes];
     		counter++;
     		continue;
     	}
     	if(counter == 1)
     	{
     		emptofind = a;
     		counter++;
     		continue;
     	}     	   		  
 		nodevalues[counter-2] = a;
 		counter++;
 		if(counter == totalnodes+2)
     	{
     		break; 
     	}     	
     	
     }	 
	 in.close();
	 for (int i=0;i<nodevalues.length;i++)
	 {	
		 	tree.insert(nodevalues[i]); 
	 }
    
    tree.findParent(emptofind);; 
	} 
}
class BST { 

    class BSTNode { 
        int value; 
        BSTNode left, right; 
  
        public BSTNode(int item) { 
            value = item; 
            left = right = null; 
        } 
    } 

    BSTNode root; 

    BST() {  
        root = null;  
    } 
    void insert(int value) { 
       root = insertNode(root, value); 
    } 
    BSTNode insertNode(BSTNode root, int value) { 
  
        if (root == null) { 
            root = new BSTNode(value); 
            return root; 
        } 
        if (value < root.value) 
            root.left = insertNode(root.left, value); 
        else if (value > root.value) 
            root.right = insertNode(root.right, value); 
        return root; 
    } 
 
    void findParent(int valtosearch) {
    	int parentEmp = root.value;
    	if(root.value == valtosearch) {
    		System.out.println(root.value);
    		return;
    	}
    	if (root != null) 
        {             
        	while(true)
        	{  
        		if((root.left == null && root.right== null)) 
        		{
        			if(root.value == valtosearch)
        			{
        				System.out.println(parentEmp);
            			return;
        			}
        			else
        			{
        				break;
        			}        			
        		}
        		if(root.value == valtosearch)
                {
        			System.out.println(parentEmp);
        			return;
                }
        		else
        		{
        			if(root.value <= valtosearch)
        			{
        				parentEmp = root.value;
        				root = root.right;
        			}
        			else
        			{
        				parentEmp = root.value;
        				root = root.left;
        			}
        		}
        	}
        	System.out.println("Employee Not Found");
        } 
    }     
}